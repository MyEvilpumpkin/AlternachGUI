#pragma once

// Паттерн - комбинация единиц в квадрате 3x3, записанная в виде порядковых номеров ячеек, начиная с единицы
// Поле - комбинация паттернов
// Преобразованное поле - поле, в котором все паттерны заменены на эквивалентные им комбинации единиц и нулей

enum dir { UP, LEFT, DOWN, RIGHT }; // Направления сдвига паттернов

int** FreeField(int**, int); // Освобождение памяти из под поля
void FreePatterns(); // Освобождание памяти из под паттернов
void FreeFIELDS(int); // Освобождение памяти из под полей
void FindAllPatterns(); // Нахождение всех паттернов, создающих и не создающих жизнь
int MovePattern(int, dir); // Сдвиг паттерна
bool MatchCheck(int, int); // Проверка на наличие совпадений в двух паттернах
bool FullMatchCheck(int, int); // Проверка на содержание одного паттерна в другом
int InversePattern(int); // Составление паттерна, дополняющего исходный паттерн до полного (состоящего только из единиц)
int* FindNeighboursOneSide(int, dir, bool); // Поиск возможных паттернов, если есть соседний паттерн только с одной из сторон (сверху или слева)
int* FindNeighboursTwoSide(int, int, bool); // Поиск возможных паттернов, если есть соседние паттерны с двух сторон (сверху и слева)
int** CopyField(int**, int, int); // Создание копии поля
bool BoundaryCheck(int**, int, int, int, int); // Проверка паттернов, находящихся на границе поля (паттерны на границе не должны создавать жизнь за предалами поля)
void FindAllFields(int**, int, int); // Нахождение полей, предшествующих исходному полю
int** ReformField(int**, int, int); // Составление из поля паттернов преобразованного поля
void Set_FIELDS(int***);
void Set_NUM_OF_FIELDS(int);
int*** Get_FIELDS();
int Get_NUM_OF_FIELDS();
